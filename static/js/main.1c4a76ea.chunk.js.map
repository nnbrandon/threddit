{"version":3,"sources":["components/Navbar/Navbar.module.scss","shared/Modal/Modal.module.scss","components/GoToSubreddit/GoToSubreddit.module.scss","components/AddSubreddit/AddSubreddit.module.scss","shared/TextInput/TextInput.module.scss","components/Dashboard/Dashboard.module.scss","shared/Button/Button.module.scss","components/Icons/Spinner.module.scss","components/Comments/Comments.module.scss","components/Posts/Posts.module.scss","shared/Button/Button.js","components/Navbar/Navbar.js","components/Comments/PostSection.js","components/Comments/Comment.js","components/Comments/CommentsList.js","components/Icons/Spinner.js","components/Icons/Hamburger.js","Reddit/comment.js","Reddit/post.js","Reddit/comments.js","components/Comments/CommentsOverview.js","components/Posts/Post.js","components/Posts/InfiniteScroll.js","shared/TextInput/TextInput.js","shared/Modal/Modal.js","components/GoToSubreddit/GoToSubreddit.js","Reddit/subreddits.js","components/AddSubreddit/AddSubreddit.js","Reddit/posts.js","components/Posts/PostsView.js","components/Dashboard/DashboardRouter.js","components/Dashboard/Dashboard.js","components/ThredditRouter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Button","type","onClickEvent","label","className","styles","button","onClick","Navbar","navData","selectedSubreddit","onCloseNav","onShowGoToSubreddit","onShowAddSubreddit","subreddit","renderNavData","map","data","index","selectedStyle","path","to","text","sidebar","alt","size","nav","buttons","buttonLayout","PostSection","renderPostSection","post","title","score","num_comments","prefixedAuthor","getPrefixedAuthor","date","timeSince","previewSource","getPreviewSource","text_html","he","decode","undefined","url","href","target","rel","preview","previewImg","src","subreddit_name_prefixed","postSection","postSectionPreview","textHtml","dangerouslySetInnerHTML","__html","Fragment","Comment","comment","body_html","id","depth","CommentsList","renderedComments","comments","Spinner","icon","spinner","Hamburger","this","author","created_utc","body","commentId","name","parent_id","datePosted","Date","seconds","Math","floor","interval","Post","postId","is_video","subreddit_id","selftext","selftext_html","thumbnail","thumbnail_height","thumbnail_width","height","width","images","length","source","replace","toLowerCase","fetchComments","fetchPost","a","axios","get","result","console","log","status","Error","children","commentsObject","flattenComments","childrenArr","reduce","accum","current","replies","flattenedReplies","push","getCommentsUrlJSON","CommentsOverview","selectedPost","onCloseComments","match","showNavBar","useState","setComments","fetchedPost","setFetchedPost","loading","setLoading","params","scrollTopRef","useRef","getPost","useEffect","document","addEventListener","removeEventListener","commentsUrlJSON","error","scrollTo","fetch","backArrow","container","ref","postSectionHeader","hamburger","commentsContainer","commentsSection","isHome","onClickPost","commentsPath","subredditSection","link","InfiniteScroll","hasNextPage","isNextPageLoading","postList","loadNextPage","itemCount","isItemLoaded","listRef","widthRef","loadingIndexRef","loadMoreItems","resetAfterIndex","getItemSize","node","createElement","titleNode","postedNode","metadataNode","innerText","margin","style","cssText","appendChild","thumbnailNode","nodeHeight","clone","cloneNode","clientHeight","parentNode","removeChild","getNodeHeight","RenderedPost","postWrapper","threshold","onItemsRendered","list","itemSize","TextInput","locked","focused","value","onChange","active","setActive","inputValue","setInputValue","inputError","setInputError","fieldClassName","field","placeholder","event","onFocus","onBlur","htmlFor","Modal","modalSize","onClose","wrapperRef","innerRef","smallModalBox","normalModalBox","handleClickOutside","contains","modalContainer","GoToSubreddit","setSubreddit","history","useHistory","layout","closeButton","subredditInput","goButton","preventDefault","addSubreddit","localStorage","getItem","setItem","isSubscribed","AddSubreddit","fetchSubreddits","addButton","fetchPosts","currentAfter","after","posts","extractPosts","nextAfter","child","PostsView","subreddits","setPostList","setAfter","setSelectedPost","setShowNavBar","showGoToSubreddit","setShowGoToSubreddit","showAddSubreddit","setShowAddSubreddit","setHasNextPage","setIsNextPageLoading","keyCode","initialLoading","subredditText","render","props","heart","color","removeItem","removeSubreddit","loadMore","setTimeout","prevPostList","err","args","DashboardRouter","exact","Dashboard","setSubreddits","useCallback","sortedSubreddits","Object","keys","key","sort","b","lowercasedA","lowercasedB","content","ThredditRouter","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,QAAU,wBAAwB,aAAe,6BAA6B,kBAAoB,kCAAkC,IAAM,sB,mBCA9LD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,eAAiB,8BAA8B,cAAgB,6BAA6B,eAAiB,gC,mBCApKD,EAAOC,QAAU,CAAC,OAAS,8BAA8B,eAAiB,sCAAsC,SAAW,gCAAgC,YAAc,qC,mBCAzKD,EAAOC,QAAU,CAAC,OAAS,6BAA6B,eAAiB,qCAAqC,UAAY,gCAAgC,YAAc,oC,mBCAxKD,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,OAAS,0BAA0B,OAAS,0BAA0B,MAAQ,2B,mBCAjID,EAAOC,QAAU,CAAC,UAAY,6BAA6B,QAAU,6B,mBCArED,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,wB,kBCA5DD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,kBAAoB,oCAAoC,UAAY,4BAA4B,UAAY,4BAA4B,QAAU,0BAA0B,QAAU,0BAA0B,YAAc,8BAA8B,kBAAoB,oCAAoC,mBAAqB,qCAAqC,YAAc,8BAA8B,WAAa,6BAA6B,SAAW,6B,uCCAzgBD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,cAAgB,6BAA6B,UAAY,yBAAyB,KAAO,oBAAoB,YAAc,2BAA2B,QAAU,uBAAuB,KAAO,oBAAoB,UAAY,yBAAyB,aAAe,4BAA4B,MAAQ,uB,mNCQ/WC,MANf,YAA6C,EAA5BC,KAA6B,IAAvBC,EAAsB,EAAtBA,aAAcC,EAAQ,EAARA,MACjC,OACI,wBAAQF,KAAK,SAASG,UAAWC,IAAOC,OAAQC,QAASL,EAAzD,SAAwEC,KCyCjEK,MAvCf,YAAsG,IAApFC,EAAmF,EAAnFA,QAASC,EAA0E,EAA1EA,kBAAmBC,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,oBAAqBC,EAAsB,EAAtBA,mBACvEC,EAAYJ,EAAoB,MAAQA,EAAoB,GAC5DK,EAAgBN,EAAQO,KAAI,SAACC,EAAMC,GACvC,IAAIC,EAOJ,OALEL,IAAcG,EAAKG,MACJ,KAAdN,GAAkC,UAAdG,EAAKG,QAE1BD,EAAgBd,IAAOK,mBAGvB,6BACE,cAAC,IAAD,CAAMN,UAAWe,EAAeE,GAAIJ,EAAKG,KAAzC,SACGH,EAAKK,QAFDJ,MAQb,OACE,sBAAKd,UAAWC,IAAOkB,QAAvB,UACE,+BACE,cAAC,IAAD,CAAYC,IAAI,QAAQjB,QAASI,EAAYc,KAAK,WAEpD,qBAAKrB,UAAWC,IAAOqB,IAAvB,SACE,6BAAKX,MAEP,sBAAKX,UAAWC,IAAOsB,QAAvB,UACE,sBAAMvB,UAAWC,IAAOuB,aAAxB,SACE,cAAC,EAAD,CAAQ1B,aAAcU,EAAqBT,MAAM,sBAEnD,sBAAMC,UAAWC,IAAOuB,aAAxB,SACE,cAAC,EAAD,CAAQ1B,aAAcW,EAAoBV,MAAM,2B,iCCa3C0B,MA/Cf,YAAgC,IAC1BC,EADiBC,EAAQ,EAARA,KAErB,GAAIA,EAAM,CACR,IAAQC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,aAChBC,EAAiBJ,EAAKK,oBACtBC,EAAON,EAAKO,YACZC,EAAgBR,EAAKS,mBAErBlB,EAAOS,EAAKU,UAAYC,IAAGC,OAAOZ,EAAKU,gBAAaG,EACpDC,EAAMd,EAAKc,IACf,mBAAGC,KAAMf,EAAKc,IAAKE,OAAO,SAASC,IAAI,aAAvC,SACGjB,EAAKc,WAEND,EACEK,EAAUV,EACd,qBACEnC,UAAWC,IAAO6C,WAClBC,IAAKZ,EAAcM,IACnBrB,IAAG,UAAKO,EAAKqB,wBAAV,cAAuCrB,EAAKC,cAE/CY,EAEJd,EACE,sBAAK1B,UAAWC,IAAOgD,YAAvB,UACE,qCACKtB,EAAKjB,UADV,cACgCqB,EADhC,IACiDE,KAEjD,6BAAKL,IACJa,EACD,uBACA,qBAAKzC,UAAWC,IAAOiD,mBAAvB,SAA4CL,IAC5C,qBACE7C,UAAWC,IAAOkD,SAClBC,wBAAyB,CAAEC,OAAQnC,KAGrC,uBACA,gCACGW,EADH,YACmBC,EADnB,kBAON,OAAO,cAAC,IAAMwB,SAAP,UAAiB5B,KCrBX6B,MAxBf,YAA+B,IAKzBrC,EALasC,EAAW,EAAXA,QACT3B,EAAgC2B,EAAhC3B,MAAO4B,EAAyBD,EAAzBC,UAAWC,EAAcF,EAAdE,GAAIC,EAAUH,EAAVG,MACxB5B,EAAiByB,EAAQxB,oBACzBC,EAAOuB,EAAQtB,YAOrB,OAJIuB,IACFvC,EAAOoB,IAAGC,OAAOkB,IAIjB,sBAAKzD,UAAWC,IAAOuD,QAAvB,UACE,6CACazB,EADb,IAC8BE,KAE9B,qBAAKmB,wBAAyB,CAAEC,OAAQnC,KACxC,uBACA,gCACGW,EADH,2BACkC8B,OAPCD,ICG1BE,MAdf,YAAqC,IAC7BC,EAD4B,EAAZC,SACYlD,KAAI,SAAC4C,EAAS1C,GAAV,OACpC,cAAC,EAAD,CAAuC0C,QAASA,GAAhD,UAAiBA,EAAQE,IAAzB,OAA8B5C,OAGhC,OACE,gCACG+C,EACD,uBACA,2B,yBCGSE,MAXf,YACE,OADyB,EAAR1C,KAEf,cAAC,IAAD,CACED,IAAI,aACJ4C,KAAK,UACLhE,UAAWC,IAAOgE,QAClB5C,KAAM,U,QCHG6C,MALf,YAAuC,IAAlB/D,EAAiB,EAAjBA,QAEnB,OAFoC,EAARkB,KAErB,cAAC,IAAD,CAAiBlB,QAASA,EAASkB,KADzB,U,iCCJNkC,EAAb,WACE,WAAY1C,GAAO,oBACjBsD,KAAKC,OAASvD,EAAKuD,OACnBD,KAAKE,YAAcxD,EAAKwD,YACxBF,KAAKG,KAAOzD,EAAKyD,KACjBH,KAAKV,UAAY5C,EAAK4C,UACtBU,KAAKR,MAAQ9C,EAAK8C,MAClBQ,KAAKT,GAAK7C,EAAK6C,GACfS,KAAKI,UAAY1D,EAAK2D,KACtBL,KAAKM,UAAY5D,EAAK4D,UACtBN,KAAKtC,MAAQhB,EAAKgB,MAClBsC,KAAKzD,UAAYG,EAAKH,UACtByD,KAAKnB,wBAA0BnC,EAAKmC,wBAZxC,qDAeE,WACE,MAAM,KAAN,OAAYmB,KAAKC,UAhBrB,uBAmBE,WACE,IAAMM,EAAa,IAAIC,KAAwB,IAAnBR,KAAKE,aAE7BO,EAAUC,KAAKC,OAAO,IAAIH,KAASD,GAAc,KAEjDK,EAAWH,EAAU,QAEzB,OAAIG,EAAW,EACNF,KAAKC,MAAMC,GAAY,cAEhCA,EAAWH,EAAU,QACN,EACNC,KAAKC,MAAMC,GAAY,eAEhCA,EAAWH,EAAU,OACN,EACNC,KAAKC,MAAMC,GAAY,aAEhCA,EAAWH,EAAU,MACN,EACNC,KAAKC,MAAMC,GAAY,cAEhCA,EAAWH,EAAU,IACN,EACNC,KAAKC,MAAMC,GAAY,eAEzBF,KAAKC,MAAMF,GAAW,mBA7CjC,KCAaI,EAAb,WACE,WAAYnE,GAAO,oBACjBsD,KAAKC,OAASvD,EAAKuD,OACnBD,KAAKE,YAAcxD,EAAKwD,YACxBF,KAAKT,GAAK7C,EAAK6C,GACfS,KAAKc,OAASpE,EAAK2D,KACnBL,KAAKe,SAAWrE,EAAKqE,SACrBf,KAAKtC,MAAQhB,EAAKgB,MAClBsC,KAAKzD,UAAYG,EAAKH,UACtByD,KAAKgB,aAAetE,EAAKsE,aACzBhB,KAAKnB,wBAA0BnC,EAAKmC,wBACpCmB,KAAKvC,MAAQf,EAAKe,MAClBuC,KAAK1B,IAAM5B,EAAK4B,IAChB0B,KAAKrC,aAAejB,EAAKiB,aACzBqC,KAAKjD,KAAOL,EAAKuE,SACjBjB,KAAK9B,UAAYxB,EAAKwE,cACtBlB,KAAKtB,QAAUhC,EAAKgC,QACpBsB,KAAKe,SAAWrE,EAAKqE,SAErBf,KAAKmB,UACHzE,EAAK4B,KAAO5B,EAAK0E,kBAAoB1E,EAAK2E,gBACtC,CACE/C,IAAK5B,EAAKyE,UACVG,OAAQ5E,EAAK0E,iBACbG,MAAO7E,EAAK2E,sBAEdhD,EA1BV,oDA6BE,WACE,GACE2B,KAAKtB,SACLsB,KAAKtB,QAAQ8C,QACbxB,KAAKtB,QAAQ8C,OAAOC,OAAS,IAC5BzB,KAAKe,SACN,CACA,IAAQW,EAAW1B,KAAKtB,QAAQ8C,OAAO,GAA/BE,OACR,IAAKA,EACH,OAEF,MAAO,CACLJ,OAAQI,EAAOJ,OACfC,MAAOG,EAAOH,MACdjD,IAAKoD,EAAOpD,IAAIqD,QAAQ,OAAQ,QA3CxC,+BAiDE,WACE,MAAM,KAAN,OAAY3B,KAAKC,UAlDrB,oCAqDE,WACE,OAAOD,KAAKzD,UAAUqF,gBAtD1B,uBAyDE,WACE,IAAMrB,EAAa,IAAIC,KAAwB,IAAnBR,KAAKE,aAE7BO,EAAUC,KAAKC,OAAO,IAAIH,KAASD,GAAc,KAEjDK,EAAWH,EAAU,QAEzB,OAAIG,EAAW,EACNF,KAAKC,MAAMC,GAAY,cAEhCA,EAAWH,EAAU,QACN,EACNC,KAAKC,MAAMC,GAAY,eAEhCA,EAAWH,EAAU,OACN,EACNC,KAAKC,MAAMC,GAAY,aAEhCA,EAAWH,EAAU,MACN,EACNC,KAAKC,MAAMC,GAAY,cAEhCA,EAAWH,EAAU,IACN,EACNC,KAAKC,MAAMC,GAAY,eAEzBF,KAAKC,MAAMF,GAAW,mBAnFjC,KCIO,SAAeoB,EAAtB,oC,4CAAO,WAA6BvD,EAAKwD,GAAlC,yBAAAC,EAAA,+EAGYC,IAAMC,IAAN,UAAa3D,EAAb,cAHZ,UAGH4D,EAHG,OAIHC,QAAQC,IAAIF,GACU,MAAlBA,EAAOG,OALR,sBAMK,IAAIC,MAAM,4BANf,6DASG,IAAIA,MAAM,4BATb,YAYDJ,IAAUA,EAAOxF,KAZhB,oBAcCoF,IACFtE,EAAO,IAAIqD,EAAKqB,EAAOxF,KAAK,GAAGA,KAAK6F,SAAS,GAAG7F,OAG5C8F,EAAiBN,EAAOxF,KAAK,GAlBhC,uBAoBK,IAAI4F,MAAM,4BApBf,WAsBK5F,EAAS8F,EAAT9F,KAtBL,uBAwBK,IAAI4F,MAAM,4BAxBf,eA2BKC,EAAa7F,EAAb6F,SACF5C,EAAW8C,EAAgBF,GA5B9B,kBA6BI,CACL/E,OACAmC,aA/BC,0D,sBAoCP,SAAS8C,EAAgBC,GACvB,OAAOA,EAAYC,QAAO,SAACC,EAAOC,GAChC,IAAQnG,EAASmG,EAATnG,KACF2C,EAAU,IAAID,EAAQ1C,GAC5B,GAAIA,EAAKoG,QAAS,CAChB,IACMC,EAAmBN,EADJ/F,EAAKoG,QAAQpG,KAA1B6F,UAERK,EAAMI,KAAK3D,GACXuD,EAAK,sBAAOA,GAAP,YAAiBG,SAEtBH,EAAMI,KAAK3D,GAEb,OAAOuD,IACN,IC1CL,SAASK,EAAmB1G,EAAWuE,GACrC,MAAM,4BAAN,OAAmCvE,EAAnC,qBAAyDuE,EAAzD,SAqGaoC,MAlGf,YAMI,IALFC,EAKC,EALDA,aACAC,EAIC,EAJDA,gBACAC,EAGC,EAHDA,MACAjH,EAEC,EAFDA,WACAkH,EACC,EADDA,WAEA,EAAgCC,mBAAS,IAAzC,mBAAO5D,EAAP,KAAiB6D,EAAjB,KACA,EAAsCD,wBAASlF,GAA/C,mBAAOoF,EAAP,KAAoBC,EAApB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA8BP,EAAMQ,OAA5B/C,EAAR,EAAQA,OAAQvE,EAAhB,EAAgBA,UACVuH,EAAeC,mBAEfC,IACHb,KAAiBA,GAAgBA,EAAa5D,KAAOuB,IAGlDtD,EAAOwG,EAAUP,EAAcN,EAErCc,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWf,GAC9B,WACLc,SAASE,oBAAoB,UAAWhB,GACxCI,EAAY,IACZE,OAAerF,MAEhB,CAAC+E,IAEJa,qBAAU,WAAM,4CACd,kCAAAlC,EAAA,6DACQsC,EAAkBpB,EAAmB1G,EAAWuE,GACtD8C,GAAW,GAFb,kBAIqC/B,EAC/BwC,EACAL,GANN,gBAIYxG,EAJZ,EAIYA,KAAMmC,EAJlB,EAIkBA,SAId6D,EAAY7D,GAERqE,GACFN,EAAelG,GAXrB,kDAcI2E,QAAQmC,MAAR,MAdJ,QAgBEV,GAAW,GAhBb,2DADc,sBAwBd,OAHAE,EAAajB,QAAQ0B,SAAS,EAAG,GArBlB,WAAD,wBAsBdC,CAAMjI,EAAWuE,GAEV,WACL0C,EAAY,IACZE,OAAerF,MAEhB,CAAC9B,EAAWuE,EAAQkD,IAEvB,IAAMlE,EAAU6D,EACd,qBAAK9H,UAAWC,IAAO6H,QAAvB,SACE,cAAC,EAAD,WAEAtF,EAEEoG,EAAYnB,EAChB,cAAC,IAAD,CACEzH,UAAWC,IAAO2I,UAClBxH,IAAI,OACJjB,QAASoH,EACTlG,KAAK,SAGP,yBAGF,OACE,sBAAKrB,UAAWC,IAAO4I,UAAWC,IAAKb,EAAvC,UACE,sBAAKjI,UAAWC,IAAO8I,kBAAvB,UACE,uBAAM/I,UAAWC,IAAO+I,UAAxB,WACIvB,GAAc,cAAC,EAAD,CAAWtH,QAASI,IACnCqI,KAEH,8BACE,cAAC,IAAD,CAAYxH,IAAI,QAAQjB,QAASoH,EAAiBlG,KAAK,cAG3D,qBAAKrB,UAAWC,IAAOgJ,kBAAvB,SACE,sBAAKjJ,UAAWC,IAAOiJ,gBAAvB,UACE,cAAC,EAAD,CAAavH,KAAMA,EAAM4F,gBAAiBA,IAC1C,uBACCtD,EACD,cAAC,EAAD,CAAcH,SAAUA,a,wBClEnBkB,MApCf,YAA8C,IAQxCM,EARU6D,EAA6B,EAA7BA,OAAQxH,EAAqB,EAArBA,KAAMyH,EAAe,EAAfA,YACpBxH,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,aAChBC,EAAiBJ,EAAKK,oBACtBC,EAAON,EAAKO,YACZmH,EAAeF,EAAM,kBACZxH,EAAKjB,UADO,qBACeiB,EAAK+B,IADpB,aAEjB/B,EAAKjB,UAFY,qBAEUiB,EAAK+B,IAG1C,GAAI/B,EAAK2D,UAAW,CAClB,MAA+B3D,EAAK2D,UAA5B7C,EAAR,EAAQA,IAAKgD,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,MACrBJ,EACE,qBAAKtF,UAAWC,IAAOqF,UAAvB,SACE,qBAAKvC,IAAKN,EAAKiD,MAAOA,EAAOD,OAAQA,EAAQrE,IAAKQ,MAKxD,IAAM0H,EAAmBH,EAASxH,EAAKqB,6BAA0BR,EAEjE,OACE,yBAASxC,UAAWC,IAAO0B,KAAMxB,QAAS,kBAAMiJ,EAAYzH,IAA5D,SACE,eAAC,IAAD,CAAM3B,UAAWC,IAAOsJ,KAAMtI,GAAIoI,EAAlC,UACE,gCACGC,EADH,cACgCvH,EADhC,IACiDE,KAEjD,6BAAKL,IACJ0D,EACD,gCACGzD,EADH,YACmBC,EADnB,qBCyJO0H,OAhKf,YAmBI,IAlBF9I,EAkBC,EAlBDA,UAEAyI,EAgBC,EAhBDA,OAGAM,EAaC,EAbDA,YAIAC,EASC,EATDA,kBAGAC,EAMC,EANDA,SAGAC,EAGC,EAHDA,aAEAR,EACC,EADDA,YAGMS,EAAYJ,EAAcE,EAAS/D,OAAS,EAAI+D,EAAS/D,OAGzDkE,EAAe,SAAChJ,GAAD,OAAY2I,GAAe3I,EAAQ6I,EAAS/D,QAE3DmE,EAAU7B,iBAAO,MACjB8B,EAAW9B,iBAAO,MAClB+B,EAAkB/B,iBAAO,MAIzBgC,EAAgBR,EAAoB,aAAWE,EAErDxB,qBAAU,WACJ2B,EAAQ/C,UACVV,QAAQC,IACN,sGAEFwD,EAAQ/C,QAAQmD,gBAAgB,GAChCF,EAAgBjD,QAAU,QAE3B,CAACtG,IAEJ0H,qBAAU,WACR9B,QAAQC,IACN,2CAA6C0D,EAAgBjD,SAE3DiD,EAAgBjD,SAClB+C,EAAQ/C,QAAQmD,gBAAgBF,EAAgBjD,WAEjD,CAAC2C,IAEJ,IAAMS,EAAc,SAACtJ,GACnB,IAAKgJ,EAAahJ,GAEhB,OADAmJ,EAAgBjD,QAAUlG,EACnB,IAGT,IAAMa,EAAOgI,EAAS7I,GAEhBuJ,EAAOhC,SAASiC,cAAc,OAC9BC,EAAYlC,SAASiC,cAAc,MACnCE,EAAanC,SAASiC,cAAc,OACpCG,EAAepC,SAASiC,cAAc,OAM5C,GAJAC,EAAUG,UAAY/I,EAAKC,MAC3B4I,EAAWE,UAAX,YAA4B/I,EAAKjB,UAAjC,sBAAwDiB,EAAKI,eAA7D,iBACA0I,EAAaC,UAAb,UAA4B/I,EAAKE,MAAjC,oBAAkDF,EAAKG,aAAvD,aAEIkI,EAAShD,QAAS,CACpBV,QAAQC,IAAIyD,EAAShD,SACrB,IAAM2D,EAA4B,GAAnBX,EAAShD,QACxBV,QAAQC,IAAI,YAAcoE,GAC1B,IACMjF,EAAQsE,EAAShD,QAAU2D,EAASA,EAD1B,GAEhBrE,QAAQC,IAAI,aAAeb,GAE3B,IAAMkF,EAAK,gBAAYlF,EAAZ,cA7Ff,2IA6Fe,yBACX6E,EAAUK,MAAMC,QAAUD,EAC1BJ,EAAWI,MAAMC,QAAUD,EAC3BH,EAAaG,MAAMC,QAAUD,EAO/B,GAJAP,EAAKS,YAAYP,GACjBF,EAAKS,YAAYN,GACjBH,EAAKS,YAAYL,GAEb9I,EAAK2D,UAAW,CAClB,MAA0B3D,EAAK2D,UAAvBI,EAAR,EAAQA,MAAOD,EAAf,EAAeA,OACTsF,EAAgB1C,SAASiC,cAAc,OAC7CS,EAAcH,MAAMC,QAApB,gBAAuCnF,EAAvC,qBAAyDD,EAAzD,OACA4E,EAAKS,YAAYC,GAGnB,IAAMC,EA5GV,SAAuBX,GACrB,IAAMY,EAAQZ,EAAKa,WAAU,GAE7BD,EAAML,MAAMC,QAAU,0CAEtBxC,SAAS/D,KAAKwG,YAAYG,GAE1B,IAAMxF,EAASwF,EAAME,aAGrB,OADAF,EAAMG,WAAWC,YAAYJ,GACtBxF,EAkGc6F,CAAcjB,GAEjC,OADA/D,QAAQC,IAAR,uBAA4ByE,IACrB,GAAKA,GAIRO,EAAe,SAAC,GAAsB,IAApBzK,EAAmB,EAAnBA,MAAO8J,EAAY,EAAZA,MACvBjJ,EAAOgI,EAAS7I,GAoBtB,OAlBKgJ,EAAahJ,GAQd,qBAAK8J,MAAOA,EAAO5K,UAAWC,IAAOuL,YAArC,SACE,cAAC,EAAD,CACErC,OAAQA,EAERxH,KAAMA,EACNyH,YAAaA,GAFRzH,EAAK+B,MATd,qBAAKkH,MAAOA,EAAO5K,UAAS,UAAKC,IAAO6H,SAAxC,SACE,cAAC,EAAD,OAkBR,OACE,cAAC,IAAD,UACG,YAAwB,IAArBrC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAIV,OAHIA,IAAUsE,EAAShD,UACrBgD,EAAShD,QAAUtB,GAGnB,cAAC,IAAD,CACEoE,aAAcA,EACdD,UAAWA,EACXK,cAAeA,EACfuB,UAAW,EAJb,SAMG,gBAAGC,EAAH,EAAGA,gBAAiB5C,EAApB,EAAoBA,IAApB,OACC,cAAC,IAAD,CACEe,UAAWA,EACX6B,gBAAiBA,EACjB5C,IAAK,SAAC6C,GACJ7C,EAAI6C,GACJ5B,EAAQ/C,QAAU2E,GAEpBC,SAAUxB,EACV3E,OAAQA,EACRC,MAAOA,EATT,SAWG6F,W,wCCnIFM,OAzCf,YAQI,IAPAnI,EAOD,EAPCA,GACAoI,EAMD,EANCA,OACAC,EAKD,EALCA,QACAC,EAID,EAJCA,MACAvD,EAGD,EAHCA,MAGD,IAFC1I,aAED,MAFS,GAET,EADCkM,EACD,EADCA,SAEA,EAA4BvE,mBAAUoE,GAAUC,IAAY,GAA5D,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAoCzE,mBAASsE,GAAS,IAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAoC3E,mBAASe,GAAS,IAAtD,mBAAO6D,EAAP,KAAmBC,EAAnB,KASMC,EAAc,UAAMvM,KAAOwM,MAAb,aAAuBX,EAASI,EAASA,GAAUF,IACnE/L,KAAOiM,OADS,YACEJ,IAAWI,EAAUjM,KAAO6L,YAAStJ,GAE3D,OACI,sBAAKxC,UAAWwM,EAAhB,UACI,uBACI9I,GAAIA,EACJ7D,KAAK,OACLmM,MAAOI,EACPM,YAAa3M,EACbkM,SAjBZ,SAAuBU,GACnB,IAAMX,EAAQW,EAAMhK,OAAOqJ,MAG3B,OAFAK,EAAcL,GACdO,EAAc,IACPN,EAASvI,EAAIsI,IAcZY,QAAS,kBAAOd,GAAUK,GAAU,IACpCU,OAAQ,kBAAOf,GAAUK,GAAU,MAEvC,uBAAOW,QAASpJ,EAAI1D,UAAWyI,GAAS,QAAxC,SACK6D,GAAcvM,Q,oBCUhBgN,OA5Cf,YAA2C,IAInCC,EAJQtG,EAA0B,EAA1BA,SAAUuG,EAAgB,EAAhBA,QAAS5L,EAAO,EAAPA,KACzB6L,EAAahF,iBAAO,MACpBiF,EAAWjF,iBAAO,MAGxB,GACS,UADD7G,EAEA2L,EAAY/M,KAAOmN,mBAMnBJ,EAAY/M,KAAOoN,eAoB3B,OAhBAjF,qBAAU,WACN,SAASkF,EAAmBX,GACpBO,EAAWlG,SAAWkG,EAAWlG,QAAQuG,SAASZ,EAAMhK,SACrDwK,EAASnG,UAAYmG,EAASnG,QAAQuG,SAASZ,EAAMhK,SACxDsK,IAMR,OADA5E,SAASC,iBAAiB,YAAagF,GAChC,WAEHjF,SAASE,oBAAoB,YAAa+E,MAE/C,CAACJ,EAAYC,EAAUF,IAGtB,qBAAKnE,IAAKoE,EAAYlN,UAAWC,KAAO4I,UAAxC,SACI,qBAAK7I,UAAWC,KAAOuN,eAAvB,SACI,qBAAK1E,IAAKqE,EAAUnN,UAAWgN,EAA/B,SACKtG,SCDN+G,OA/Bf,YAAmC,IAAXR,EAAU,EAAVA,QACpB,EAAkCvF,mBAAS,IAA3C,mBAAOhH,EAAP,KAAkBgN,EAAlB,KACMC,EAAUC,cAYhB,OACI,cAAC,GAAD,CAAOX,QAASA,EAAS5L,KAAK,QAA9B,SACI,uBAAMrB,UAAWC,KAAO4N,OAAxB,UACI,sBAAM7N,UAAWC,KAAO6N,YAAxB,SACI,cAAC,IAAD,CAAY1M,IAAI,QAAQjB,QAAS8M,EAAS5L,KAAK,WAEnD,qBAAKrB,UAAWC,KAAO8N,eAAvB,SACI,cAAC,GAAD,CAAWhO,MAAM,YAAYkM,SAjB7C,SAA2BvI,EAAIsI,GAC3B0B,EAAa1B,QAkBL,qBAAKhM,UAAWC,KAAO+N,SAAvB,SACI,cAAC,EAAD,CAAQnO,KAAK,SAASE,MAAM,KAAKD,aAhBjD,SAAiB6M,GACbA,EAAMsB,iBACNhB,IACAU,EAAQxG,KAAK,MAAQzG,cCWtB,SAASwN,GAAaxN,GACtByN,aAAaC,QAAQ1N,IACxByN,aAAaE,QAAQ3N,EAAW,MAAQA,GAQrC,SAAS4N,GAAa5N,GAC3B,QAAKyN,aAAaC,QAAQ1N,G,wBCFb6N,OA/Bf,YAAmD,IAA5BtB,EAA2B,EAA3BA,QAASuB,EAAkB,EAAlBA,gBAC5B,EAAkC9G,mBAAS,IAA3C,mBAAOhH,EAAP,KAAkBgN,EAAlB,KAaA,OACI,cAAC,GAAD,CAAOT,QAASA,EAAS5L,KAAK,QAA9B,SACI,uBAAMrB,UAAWC,KAAO4N,OAAxB,UACI,sBAAM7N,UAAWC,KAAO6N,YAAxB,SACI,cAAC,IAAD,CAAY1M,IAAI,QAAQjB,QAAS8M,EAAS5L,KAAK,WAEnD,qBAAKrB,UAAWC,KAAO8N,eAAvB,SACI,cAAC,GAAD,CAAWhO,MAAM,YAAYkM,SAlB7C,SAA2BvI,EAAIsI,GAC3B0B,EAAa1B,QAmBL,qBAAKhM,UAAWC,KAAOwO,UAAvB,SACI,cAAC,EAAD,CAAQ5O,KAAK,SAASE,MAAM,MAAMD,aAjBlD,SAAiB6M,GACbA,EAAMsB,iBACNC,GAAaxN,GACb8N,IACAvB,eChBD,SAAeyB,GAAtB,qC,8CAAO,WAA0BhO,EAAWiO,GAArC,uBAAAzI,EAAA,6DACAxF,IACHA,EAAY,OAFT,kBAMYyF,IAAMC,IAAN,mCACe1F,EADf,uBACuCiO,EADvC,cANZ,UAMHtI,EANG,OASHC,QAAQC,IAAIF,GACU,MAAlBA,EAAOG,OAVR,sBAWK,IAAIC,MAAJ,oCAAuC/F,IAX5C,+DAcG,IAAI+F,MAAJ,oCAAuC/F,IAd1C,aAiBD2F,GAAUA,EAAOxF,MAAQwF,EAAOxF,KAAKA,MAjBpC,0BAkByBwF,EAAOxF,KAAKA,KAAhC6F,EAlBL,EAkBKA,SAAUkI,EAlBf,EAkBeA,MACZC,EAAQC,GAAapI,GAnBxB,kBAoBI,CACLmI,QACAE,UAAWH,IAtBV,2D,sBA2BP,SAASE,GAAapI,GACpB,OAAOA,EAAS9F,KAAI,SAACoO,GAAD,OAAW,IAAIhK,EAAKgK,EAAMnO,SC0KjCoO,OA1Lf,YAAoE,IAA/CzH,EAA8C,EAA9CA,MAAO2B,EAAuC,EAAvCA,OAAQ+F,EAA+B,EAA/BA,WAAYV,EAAmB,EAAnBA,gBACtC9N,EAAc8G,EAAMQ,OAApBtH,UACR,EAAgCgH,mBAAS,IAAzC,mBAAOiC,EAAP,KAAiBwF,EAAjB,KACA,EAA0BzH,mBAAS,IAAnC,mBAAOkH,EAAP,KAAcQ,EAAd,KACA,EAAwC1H,wBAASlF,GAAjD,mBAAO8E,EAAP,KAAqB+H,EAArB,KACM1B,EAAUC,cAEhB,EAAoClG,oBAAS,GAA7C,mBAAOD,EAAP,KAAmB6H,EAAnB,KACA,EAAkD5H,oBAAS,GAA3D,mBAAO6H,EAAP,KAA0BC,EAA1B,KACA,EAAgD9H,oBAAS,GAAzD,mBAAO+H,EAAP,KAAyBC,EAAzB,KAEA,EAAsChI,oBAAS,GAA/C,mBAAO+B,EAAP,KAAoBkG,EAApB,KACA,EAAkDjI,oBAAS,GAA3D,mBAAOgC,EAAP,KAA0BkG,EAA1B,KA2BMvG,EAAeF,EACjB,sCACA,iCAsCJ,SAAS5I,KACP+O,GAAe7H,GAGjB,SAASjH,KACPkP,GAAoB,GACpBF,GAAsBD,GAGxB,SAAS9O,KACP+O,GAAqB,GACrBE,GAAqBD,GAGvB,SAASlI,GAAgBoF,GACD,KAAlBA,EAAMkD,SAAiC,UAAflD,EAAM9M,OAChCwP,OAAgB7M,GACZ2G,EACFwE,EAAQxG,KAAK,SAEbwG,EAAQxG,KAAR,aAAmBzG,KAxDzB0H,qBAAU,WAAM,4CACd,WAAqB1H,EAAWkO,GAAhC,mBAAA1I,EAAA,+EAEuCwI,GAAWhO,EAAWkO,GAF7D,gBAEYC,EAFZ,EAEYA,MAAOE,EAFnB,EAEmBA,UACfI,EAAYN,GACZO,EAASL,GAIPY,IAHGZ,GAMLa,GAAqB,GAXzB,kDAaItJ,QAAQmC,MAAR,MAbJ,0DADc,wBAqBd,OAHAmH,GAAqB,GAlBN,SAAD,6BAmBdjH,CAAMjI,EAAW,IAEV,WACL2O,OAAgB7M,GAChB2M,EAAY,IACZC,EAAS,IACTQ,GAAqB,GACrBD,GAAe,GACfrJ,QAAQC,IAAI,qCAEb,CAAC7F,IA2CJ,IAAMoP,GACM,KAAVlB,EACE,qBAAK5O,UAAWC,IAAO6H,QAAvB,SACE,cAAC,EAAD,WAEAtF,EAEAuN,GAAgB5G,EAAS,uCAAkB,qCAAQzI,KACzD,OACE,sBAAKV,UAAWC,IAAO4I,UAAvB,UACGpB,GACC,cAAC,EAAD,CACEpH,QAAS6O,EACT5O,kBAAmBI,EACnBH,WAAYA,GACZC,oBAAqBA,GACrBC,mBAAoBA,KAGxB,sBAAKT,UAAWC,IAAO4O,MAAvB,UACE,cAAC,IAAD,CACE7N,KAAMqI,EACN2G,OAAQ,SAACC,GAAD,OACN,cAAC,EAAD,2BACMA,GADN,IAEE1P,WAAYA,GACZkH,WAAYA,EACZH,aAAcA,EACdC,gBAAiBA,SAItBgI,GACC,cAAC,GAAD,CAAetC,QAASzM,KAEzBiP,GACC,cAAC,GAAD,CAAcxC,QAASxM,GAAoB+N,gBAAiBA,IAE9D,sBAAKxO,UAAWC,IAAO8P,cAAvB,WACItI,GACA,sBAAMzH,UAAWC,IAAO+I,UAAxB,SACE,cAAC,EAAD,CAAW7I,QAASI,OAGxB,6BACE,4BAAIwP,QAEJ5G,GAAU,sBAAMnJ,UAAWC,IAAOiQ,MAAxB,SACT5B,GAAa5N,GACZ,cAAC,IAAD,CAAcW,KAAK,OAAO8O,MAAM,oBAAoBhQ,QAvDhE,WACEmG,QAAQC,IAAI,QHzFT,SAAyB7F,GAC9ByN,aAAaiC,WAAW1P,GGyFtB2P,CAAgB3P,GAChB8N,OAsDU,cAAC,IAAD,CAAgBnN,KAAK,OAAOlB,QA9DxC,WACE+N,GAAaxN,GACb8N,YAgEI,uBACCsB,GACD,cAAC,GAAD,CACEpP,UAAWA,EACXyI,OAAQA,EACRM,YAAaA,EACbC,kBAAmBA,EACnBC,SAAUA,EACVC,aApKR,WAAiC,IAAD,EAC9B,SAAS0G,EAAS5P,EAAWkO,GAC3B,IACE2B,WAAU,sBAAC,gCAAArK,EAAA,sEAC0BwI,GAAWhO,EAAWkO,GADhD,gBACDC,EADC,EACDA,MAAOE,EADN,EACMA,UACfI,GAAY,SAACqB,GAAD,4BAAsBA,GAAtB,YAAuC3B,OACnDO,EAASL,GAKPY,IAHGZ,GAMLa,GAAqB,GAXZ,2CAYR,KACH,MAAOa,GACPnK,QAAQmC,MAAMgI,IAjBY,2BAANC,EAAM,yBAANA,EAAM,iBAoB9B,EAAApK,SAAQC,IAAR,SAAY,iBAAZ,OAAgCmK,IAChCd,GAAqB,GACrBU,EAAS5P,EAAWkO,IA+IdxF,YAzGR,SAAqBzH,GACnB2E,QAAQC,IAAI5E,GACZ0N,EAAgB1N,aCjELgP,OAtBf,YAA2D,IAAhCzB,EAA+B,EAA/BA,WAAYV,EAAmB,EAAnBA,gBACrC,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoC,OAAK,EAAC5P,KAAK,IAAlB,SACE,cAAC,IAAD,CAAUC,GAAG,YAEf,cAAC,IAAD,CACED,KAAM,QACNgP,OAAQ,SAACC,GAAD,OACN,cAAC,GAAD,2BAAeA,GAAf,IAAsB9G,QAAQ,EAAM+F,WAAYA,EAAYV,gBAAiBA,QAGjF,cAAC,IAAD,CACExN,KAAM,gBACNgP,OAAQ,SAACC,GAAD,OACN,cAAC,GAAD,2BAAeA,GAAf,IAAsB9G,QAAQ,EAAO+F,WAAYA,EAAYV,gBAAiBA,Y,oBCOzEqC,OArBf,WACE,MAAoCnJ,mBAAS,IAA7C,mBAAOwH,EAAP,KAAmB4B,EAAnB,KAEMnI,EAAQoI,uBAAY,WACxB,IAAM7B,ELTH,WACL,IAMM8B,EANyBC,OAAOC,KAAK/C,cAAcvN,KAAI,SAAAuQ,GAC3D,MAAO,CACLnQ,KAAMmN,aAAaC,QAAQ+C,GAC3BjQ,KAAMiQ,MAGsCC,MAAK,SAAClL,EAAGmL,GACvD,IAAMC,EAAcpL,EAAEhF,KAAK6E,cACrBwL,EAAcF,EAAEnQ,KAAK6E,cAE3B,OAAIuL,EAAcC,GACR,EAGND,EAAcC,EACT,EAGF,KAQT,MALgB,CAAI,CAClBvQ,KAAM,QACNE,KAAM,SAFQ,mBAGV8P,IKhBexC,GACnBsC,EAAc5B,KACb,IAMH,OAJA9G,qBAAU,WACRO,MACC,CAACA,IAGF,sBAAM3I,UAAWC,KAAO4I,UAAxB,SACE,qBAAK7I,UAAWC,KAAOuR,QAAvB,SACE,cAAC,GAAD,CAAiBtC,WAAYA,EAAYV,gBAAiB7F,SCJnD8I,OAZf,WACE,OACE,cAAC,IAAMnO,SAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOtC,KAAK,IAAI0Q,UAAWb,YCHtBc,OAJf,WACE,OAAO,cAAC,GAAD,KCQMC,I,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDdQ,IAASrC,OACL,cAAC,IAAMsC,WAAP,UACE,cAAC,GAAD,MAEFjK,SAASkK,eAAe,QAM5BX,O","file":"static/js/main.1c4a76ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Navbar_sidebar__mwQyv\",\"buttons\":\"Navbar_buttons__3W0vS\",\"buttonLayout\":\"Navbar_buttonLayout__2VQ-d\",\"selectedSubreddit\":\"Navbar_selectedSubreddit__zvZa5\",\"nav\":\"Navbar_nav__3cHYR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Modal_container__Nc-xq\",\"modalContainer\":\"Modal_modalContainer__1CKZv\",\"smallModalBox\":\"Modal_smallModalBox__2FFp1\",\"normalModalBox\":\"Modal_normalModalBox__3o1l0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"GoToSubreddit_layout__21D0p\",\"subredditInput\":\"GoToSubreddit_subredditInput__m12PC\",\"goButton\":\"GoToSubreddit_goButton__6dCc-\",\"closeButton\":\"GoToSubreddit_closeButton__3W8HW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"AddSubreddit_layout__2jH53\",\"subredditInput\":\"AddSubreddit_subredditInput__2Ks9l\",\"addButton\":\"AddSubreddit_addButton__3gyg4\",\"closeButton\":\"AddSubreddit_closeButton__3_fe6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"TextInput_field__3Nkmt\",\"active\":\"TextInput_active__3dxBt\",\"locked\":\"TextInput_locked___Exol\",\"error\":\"TextInput_error__2rUuX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dashboard_container__205D7\",\"content\":\"Dashboard_content__1OVLf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__CftuL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__-Zzob\",\"spin\":\"Spinner_spin__rZPQ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Comments_container__2gEP4\",\"commentsContainer\":\"Comments_commentsContainer__3yUU3\",\"hamburger\":\"Comments_hamburger__1FiW_\",\"backArrow\":\"Comments_backArrow__3geJG\",\"loading\":\"Comments_loading__2kYMG\",\"comment\":\"Comments_comment__3yO4C\",\"postSection\":\"Comments_postSection__1iARa\",\"postSectionHeader\":\"Comments_postSectionHeader__1YSqL\",\"postSectionPreview\":\"Comments_postSectionPreview__39AzW\",\"closeButton\":\"Comments_closeButton__3YHDJ\",\"previewImg\":\"Comments_previewImg__Xck6t\",\"textHtml\":\"Comments_textHtml__3XLtl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Posts_container__3vF_i\",\"posts\":\"Posts_posts__fNhWU\",\"subredditText\":\"Posts_subredditText__cTroL\",\"hamburger\":\"Posts_hamburger__d_e42\",\"link\":\"Posts_link__JEwjG\",\"postWrapper\":\"Posts_postWrapper__5hsp2\",\"loading\":\"Posts_loading__3ZzJ9\",\"post\":\"Posts_post__LyNp_\",\"thumbnail\":\"Posts_thumbnail__OSOEU\",\"selectedPost\":\"Posts_selectedPost__2kv0K\",\"heart\":\"Posts_heart__2tyg7\"};","import React from 'react';\nimport styles from './Button.module.scss';\n\nfunction Button({type, onClickEvent, label}) {\n    return (\n        <button type=\"submit\" className={styles.button} onClick={onClickEvent}>{label}</button>\n    )\n}\n\nexport default Button;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { IoIosClose } from 'react-icons/io';\n\nimport styles from './Navbar.module.scss';\nimport Button from '../../shared/Button/Button';\n\nfunction Navbar({ navData, selectedSubreddit, onCloseNav, onShowGoToSubreddit, onShowAddSubreddit }) {\n  const subreddit = selectedSubreddit ? '/r/' + selectedSubreddit : '';\n  const renderNavData = navData.map((data, index) => {\n    let selectedStyle;\n    if (\n      subreddit === data.path ||\n      (subreddit === '' && data.path === '/home')\n    ) {\n      selectedStyle = styles.selectedSubreddit;\n    }\n    return (\n      <li key={index}>\n        <Link className={selectedStyle} to={data.path}>\n          {data.text}\n        </Link>\n      </li>\n    );\n  });\n\n  return (\n    <div className={styles.sidebar}>\n      <span>\n        <IoIosClose alt=\"Close\" onClick={onCloseNav} size=\"50px\" />\n      </span>\n      <nav className={styles.nav}>\n        <ul>{renderNavData}</ul>\n      </nav>\n      <div className={styles.buttons}>\n        <span className={styles.buttonLayout}>\n          <Button onClickEvent={onShowGoToSubreddit} label=\"Go to Subreddit\"/>\n        </span>\n        <span className={styles.buttonLayout}>\n          <Button onClickEvent={onShowAddSubreddit} label=\"Add Subreddit\"/>\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport he from 'he';\n\nimport styles from './Comments.module.scss';\n\nfunction PostSection({ post }) {\n  let renderPostSection;\n  if (post) {\n    const { title, score, num_comments } = post;\n    const prefixedAuthor = post.getPrefixedAuthor();\n    const date = post.timeSince();\n    const previewSource = post.getPreviewSource();\n\n    const text = post.text_html ? he.decode(post.text_html) : undefined;\n    const url = post.url ? (\n      <a href={post.url} target=\"_blank\" rel=\"noreferrer\">\n        {post.url}\n      </a>\n    ) : undefined;\n    const preview = previewSource ? (\n      <img\n        className={styles.previewImg}\n        src={previewSource.url}\n        alt={`${post.subreddit_name_prefixed} - ${post.title}`}\n      />\n    ) : undefined;\n\n    renderPostSection = (\n      <div className={styles.postSection}>\n        <div>\n          r/{post.subreddit} Posted by {prefixedAuthor} {date}\n        </div>\n        <h3>{title}</h3>\n        {url}\n        <br />\n        <div className={styles.postSectionPreview}>{preview}</div>\n        <div\n          className={styles.textHtml}\n          dangerouslySetInnerHTML={{ __html: text }}\n        />\n\n        <br />\n        <div>\n          {score} score | {num_comments} comments\n        </div>\n      </div>\n    );\n  }\n\n  return <React.Fragment>{renderPostSection}</React.Fragment>;\n}\n\nexport default PostSection;\n","import React from 'react';\nimport he from 'he';\nimport styles from './Comments.module.scss';\n\nfunction Comment({ comment }) {\n  const { score, body_html, id, depth } = comment;\n  const prefixedAuthor = comment.getPrefixedAuthor();\n  const date = comment.timeSince();\n\n  let text;\n  if (body_html) {\n    text = he.decode(body_html);\n  }\n\n  return (\n    <div className={styles.comment} key={id}>\n      <div>\n        Posted by {prefixedAuthor} {date}\n      </div>\n      <div dangerouslySetInnerHTML={{ __html: text }} />\n      <br />\n      <div>\n        {score} score | Comment depth: {depth}\n      </div>\n    </div>\n  );\n}\n\nexport default Comment;\n","import React from 'react';\n\nimport Comment from './Comment';\n\nfunction CommentsList({ comments }) {\n  const renderedComments = comments.map((comment, index) => (\n    <Comment key={`${comment.id}${index}`} comment={comment} />\n  ));\n\n  return (\n    <div>\n      {renderedComments}\n      <br />\n      <br />\n    </div>\n  );\n}\n\nexport default CommentsList;\n","import React from 'react';\nimport { FaSpinner } from 'react-icons/fa';\n\nimport styles from './Spinner.module.scss';\n\nfunction Spinner({ size }) {\n  return (\n    <FaSpinner\n      alt=\"Loading...\"\n      icon=\"spinner\"\n      className={styles.spinner}\n      size={'40px' || size}\n    />\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\nimport { GiHamburgerMenu } from 'react-icons/gi';\n\nfunction Hamburger({ onClick, size }) {\n  const iconSize = '30px' || size;\n  return <GiHamburgerMenu onClick={onClick} size={iconSize} />;\n}\n\nexport default Hamburger;\n","export class Comment {\n  constructor(data) {\n    this.author = data.author;\n    this.created_utc = data.created_utc;\n    this.body = data.body;\n    this.body_html = data.body_html;\n    this.depth = data.depth;\n    this.id = data.id;\n    this.commentId = data.name;\n    this.parent_id = data.parent_id;\n    this.score = data.score;\n    this.subreddit = data.subreddit;\n    this.subreddit_name_prefixed = data.subreddit_name_prefixed;\n  }\n\n  getPrefixedAuthor() {\n    return `u/${this.author}`;\n  }\n\n  timeSince() {\n    const datePosted = new Date(this.created_utc * 1000);\n\n    var seconds = Math.floor((new Date() - datePosted) / 1000);\n\n    var interval = seconds / 31536000;\n\n    if (interval > 1) {\n      return Math.floor(interval) + ' years ago';\n    }\n    interval = seconds / 2592000;\n    if (interval > 1) {\n      return Math.floor(interval) + ' months ago';\n    }\n    interval = seconds / 86400;\n    if (interval > 1) {\n      return Math.floor(interval) + ' days ago';\n    }\n    interval = seconds / 3600;\n    if (interval > 1) {\n      return Math.floor(interval) + ' hours ago';\n    }\n    interval = seconds / 60;\n    if (interval > 1) {\n      return Math.floor(interval) + ' minutes ago';\n    }\n    return Math.floor(seconds) + ' seconds ago';\n  }\n}\n","export class Post {\n  constructor(data) {\n    this.author = data.author;\n    this.created_utc = data.created_utc;\n    this.id = data.id;\n    this.postId = data.name;\n    this.is_video = data.is_video;\n    this.score = data.score;\n    this.subreddit = data.subreddit;\n    this.subreddit_id = data.subreddit_id;\n    this.subreddit_name_prefixed = data.subreddit_name_prefixed;\n    this.title = data.title;\n    this.url = data.url;\n    this.num_comments = data.num_comments;\n    this.text = data.selftext;\n    this.text_html = data.selftext_html;\n    this.preview = data.preview;\n    this.is_video = data.is_video;\n\n    this.thumbnail =\n      data.url && data.thumbnail_height && data.thumbnail_width\n        ? {\n            url: data.thumbnail,\n            height: data.thumbnail_height,\n            width: data.thumbnail_width,\n          }\n        : undefined;\n  }\n\n  getPreviewSource() {\n    if (\n      this.preview &&\n      this.preview.images &&\n      this.preview.images.length > 0 &&\n      !this.is_video\n    ) {\n      const { source } = this.preview.images[0];\n      if (!source) {\n        return undefined;\n      }\n      return {\n        height: source.height,\n        width: source.width,\n        url: source.url.replace('amp;', ''),\n      };\n    }\n    return undefined;\n  }\n\n  getPrefixedAuthor() {\n    return `u/${this.author}`;\n  }\n\n  getLowerCasedSubreddit() {\n    return this.subreddit.toLowerCase();\n  }\n\n  timeSince() {\n    const datePosted = new Date(this.created_utc * 1000);\n\n    var seconds = Math.floor((new Date() - datePosted) / 1000);\n\n    var interval = seconds / 31536000;\n\n    if (interval > 1) {\n      return Math.floor(interval) + ' years ago';\n    }\n    interval = seconds / 2592000;\n    if (interval > 1) {\n      return Math.floor(interval) + ' months ago';\n    }\n    interval = seconds / 86400;\n    if (interval > 1) {\n      return Math.floor(interval) + ' days ago';\n    }\n    interval = seconds / 3600;\n    if (interval > 1) {\n      return Math.floor(interval) + ' hours ago';\n    }\n    interval = seconds / 60;\n    if (interval > 1) {\n      return Math.floor(interval) + ' minutes ago';\n    }\n    return Math.floor(seconds) + ' seconds ago';\n  }\n}\n","import axios from 'axios';\nimport { Comment } from './comment';\nimport { Post } from './post';\n\nexport async function fetchComments(url, fetchPost) {\n  let result;\n  try {\n    result = await axios.get(`${url}?limit=50`);\n    console.log(result);\n    if (result.status !== 200) {\n      throw new Error('Unable to fetch comments');\n    }\n  } catch (err) {\n    throw new Error('Unable to fetch comments');\n  }\n\n  if (result && result.data) {\n    let post;\n    if (fetchPost) {\n      post = new Post(result.data[0].data.children[0].data); // TODO: Fix hack\n    }\n\n    const commentsObject = result.data[1];\n    if (!commentsObject) {\n      throw new Error('Unable to fetch comments');\n    }\n    const { data } = commentsObject;\n    if (!data) {\n      throw new Error('Unable to fetch comments');\n    }\n\n    const { children } = data;\n    const comments = flattenComments(children);\n    return {\n      post,\n      comments,\n    };\n  }\n}\n\nfunction flattenComments(childrenArr) {\n  return childrenArr.reduce((accum, current) => {\n    const { data } = current;\n    const comment = new Comment(data);\n    if (data.replies) {\n      const { children } = data.replies.data;\n      const flattenedReplies = flattenComments(children);\n      accum.push(comment);\n      accum = [...accum, ...flattenedReplies];\n    } else {\n      accum.push(comment);\n    }\n    return accum;\n  }, []);\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport { IoIosArrowBack, IoIosClose } from 'react-icons/io';\n\nimport styles from './Comments.module.scss';\nimport PostSection from './PostSection';\nimport CommentsList from './CommentsList';\nimport Spinner from '../Icons/Spinner';\nimport Hamburger from '../Icons/Hamburger';\n\nimport { fetchComments } from '../../Reddit/comments';\n\nfunction getCommentsUrlJSON(subreddit, postId) {\n  return `https://www.reddit.com/r/${subreddit}/comments/${postId}.json`;\n}\n\nfunction CommentsOverview({\n  selectedPost,\n  onCloseComments,\n  match,\n  onCloseNav,\n  showNavBar,\n}) {\n  const [comments, setComments] = useState([]);\n  const [fetchedPost, setFetchedPost] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n  const { postId, subreddit } = match.params;\n  const scrollTopRef = useRef();\n\n  const getPost =\n    !selectedPost || (selectedPost && selectedPost.id !== postId)\n      ? true\n      : false;\n  const post = getPost ? fetchedPost : selectedPost;\n\n  useEffect(() => {\n    document.addEventListener('keydown', onCloseComments);\n    return () => {\n      document.removeEventListener('keydown', onCloseComments);\n      setComments([]);\n      setFetchedPost(undefined);\n    };\n  }, [onCloseComments]);\n\n  useEffect(() => {\n    async function fetch() {\n      const commentsUrlJSON = getCommentsUrlJSON(subreddit, postId);\n      setLoading(true);\n      try {\n        const { post, comments } = await fetchComments(\n          commentsUrlJSON,\n          getPost,\n        );\n        setComments(comments);\n\n        if (getPost) {\n          setFetchedPost(post);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n      setLoading(false);\n    }\n\n    // Scroll to top after subreddit and postId change\n    scrollTopRef.current.scrollTo(0, 0);\n    fetch(subreddit, postId);\n\n    return () => {\n      setComments([]);\n      setFetchedPost(undefined);\n    };\n  }, [subreddit, postId, getPost]);\n\n  const spinner = loading ? (\n    <div className={styles.loading}>\n      <Spinner />\n    </div>\n  ) : undefined;\n\n  const backArrow = showNavBar ? (\n    <IoIosArrowBack\n      className={styles.backArrow}\n      alt=\"Back\"\n      onClick={onCloseComments}\n      size=\"30px\"\n    />\n  ) : (\n    <span />\n  );\n\n  return (\n    <div className={styles.container} ref={scrollTopRef}>\n      <div className={styles.postSectionHeader}>\n        <span className={styles.hamburger}>\n          {!showNavBar && <Hamburger onClick={onCloseNav} />}\n          {backArrow}\n        </span>\n        <div>\n          <IoIosClose alt=\"Close\" onClick={onCloseComments} size=\"40px\" />\n        </div>\n      </div>\n      <div className={styles.commentsContainer}>\n        <div className={styles.commentsSection}>\n          <PostSection post={post} onCloseComments={onCloseComments} />\n          <br />\n          {spinner}\n          <CommentsList comments={comments} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CommentsOverview;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './Posts.module.scss';\n\nfunction Post({ isHome, post, onClickPost }) {\n  const { title, score, num_comments } = post;\n  const prefixedAuthor = post.getPrefixedAuthor();\n  const date = post.timeSince();\n  const commentsPath = isHome\n    ? `/home/r/${post.subreddit}/comments/${post.id}`\n    : `/r/${post.subreddit}/comments/${post.id}`;\n\n  let thumbnail;\n  if (post.thumbnail) {\n    const { url, height, width } = post.thumbnail;\n    thumbnail = (\n      <div className={styles.thumbnail}>\n        <img src={url} width={width} height={height} alt={title} />\n      </div>\n    );\n  }\n\n  const subredditSection = isHome ? post.subreddit_name_prefixed : undefined;\n\n  return (\n    <article className={styles.post} onClick={() => onClickPost(post)}>\n      <Link className={styles.link} to={commentsPath}>\n        <div>\n          {subredditSection} Posted by {prefixedAuthor} {date}\n        </div>\n        <h3>{title}</h3>\n        {thumbnail}\n        <div>\n          {score} score | {num_comments} comments\n        </div>\n      </Link>\n    </article>\n  );\n}\n\nexport default Post;\n","import React, { useEffect, useRef } from 'react';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport { VariableSizeList as List } from 'react-window';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport Post from './Post';\nimport Spinner from '../Icons/Spinner';\nimport styles from './Posts.module.scss';\n\nconst fontFamily =\n  \"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\";\n\nfunction getNodeHeight(node) {\n  const clone = node.cloneNode(true);\n  // hide the meassured (cloned) element\n  clone.style.cssText = 'position:fixed; top:-9999px; opacity:0;';\n  // add the clone to the DOM\n  document.body.appendChild(clone);\n  // meassure it\n  const height = clone.clientHeight;\n  // cleaup\n  clone.parentNode.removeChild(clone);\n  return height;\n}\n\nfunction InfiniteScroll({\n  subreddit,\n\n  isHome,\n  // Are there more items to load?\n  // (This information comes from the most recent API request.)\n  hasNextPage,\n\n  // Are we currently loading a page of items?\n  // (This may be an in-flight flag in your Redux store for example.)\n  isNextPageLoading,\n\n  // Array of items loaded so far.\n  postList,\n\n  // Callback function responsible for loading the next page of items.\n  loadNextPage,\n\n  onClickPost,\n}) {\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\n  const itemCount = hasNextPage ? postList.length + 1 : postList.length;\n\n  // Every row is loaded except for our loading indicator row.\n  const isItemLoaded = (index) => !hasNextPage || index < postList.length;\n\n  const listRef = useRef(null);\n  const widthRef = useRef(null);\n  const loadingIndexRef = useRef(null);\n\n  // Only load 1 page of items at a time.\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\n  const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage;\n\n  useEffect(() => {\n    if (listRef.current) {\n      console.log(\n        'resetting since subreddit changed and VariableSizedList keeps a cache of dimensions for each index',\n      );\n      listRef.current.resetAfterIndex(0);\n      loadingIndexRef.current = null;\n    }\n  }, [subreddit]);\n\n  useEffect(() => {\n    console.log(\n      'postList changed with loadingIndexRef = ' + loadingIndexRef.current,\n    );\n    if (loadingIndexRef.current) {\n      listRef.current.resetAfterIndex(loadingIndexRef.current);\n    }\n  }, [postList]);\n\n  const getItemSize = (index) => {\n    if (!isItemLoaded(index)) {\n      loadingIndexRef.current = index;\n      return 150;\n    }\n\n    const post = postList[index];\n\n    const node = document.createElement('div');\n    const titleNode = document.createElement('h3');\n    const postedNode = document.createElement('div');\n    const metadataNode = document.createElement('div');\n\n    titleNode.innerText = post.title;\n    postedNode.innerText = `r/${post.subreddit} Posted by ${post.prefixedAuthor} XXX days ago`;\n    metadataNode.innerText = `${post.score} score | ${post.num_comments} comments`;\n\n    if (widthRef.current) {\n      console.log(widthRef.current);\n      const margin = widthRef.current * 0.1;\n      console.log('margin = ' + margin);\n      const padding = 15;\n      const width = widthRef.current - margin - margin - padding;\n      console.log('new width ' + width);\n\n      const style = `width:${width}px;${fontFamily};word-wrap:break-word`;\n      titleNode.style.cssText = style;\n      postedNode.style.cssText = style;\n      metadataNode.style.cssText = style;\n    }\n\n    node.appendChild(titleNode);\n    node.appendChild(postedNode);\n    node.appendChild(metadataNode);\n\n    if (post.thumbnail) {\n      const { width, height } = post.thumbnail;\n      const thumbnailNode = document.createElement('div');\n      thumbnailNode.style.cssText = `width:${width}px;height:${height}px;`;\n      node.appendChild(thumbnailNode);\n    }\n\n    const nodeHeight = getNodeHeight(node);\n    console.log(`nodeHeight = ${nodeHeight}`);\n    return 50 + nodeHeight;\n  };\n\n  // Render an item or a loading indicator.\n  const RenderedPost = ({ index, style }) => {\n    const post = postList[index];\n    let content;\n    if (!isItemLoaded(index)) {\n      content = (\n        <div style={style} className={`${styles.loading}`}>\n          <Spinner />\n        </div>\n      );\n    } else {\n      content = (\n        <div style={style} className={styles.postWrapper}>\n          <Post\n            isHome={isHome}\n            key={post.id}\n            post={post}\n            onClickPost={onClickPost}\n          />\n        </div>\n      );\n    }\n    return content;\n  };\n\n  return (\n    <AutoSizer>\n      {({ height, width }) => {\n        if (width !== widthRef.current) {\n          widthRef.current = width;\n        }\n        return (\n          <InfiniteLoader\n            isItemLoaded={isItemLoaded}\n            itemCount={itemCount}\n            loadMoreItems={loadMoreItems}\n            threshold={8}\n          >\n            {({ onItemsRendered, ref }) => (\n              <List\n                itemCount={itemCount}\n                onItemsRendered={onItemsRendered}\n                ref={(list) => {\n                  ref(list);\n                  listRef.current = list;\n                }}\n                itemSize={getItemSize}\n                height={height}\n                width={width}\n              >\n                {RenderedPost}\n              </List>\n            )}\n          </InfiniteLoader>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n\nexport default InfiniteScroll;\n","import React, {useState} from 'react';\nimport styles from './TextInput.module.scss';\n\nfunction TextInput({\n    id,\n    locked,\n    focused,\n    value,\n    error,\n    label = '',\n    onChange\n}) {\n    const [active, setActive] = useState((locked && focused) || false);\n    const [inputValue, setInputValue] = useState(value || '');\n    const [inputError, setInputError] = useState(error || '');\n\n    function onChangeEvent(event) {\n        const value = event.target.value;\n        setInputValue(value);\n        setInputError('');\n        return onChange(id, value);\n    }\n\n    const fieldClassName = `${styles.field} ${(locked ? active : active || value) &&\n        styles.active} ${(locked && !active) ? styles.locked : undefined}`;\n\n    return (\n        <div className={fieldClassName}>\n            <input\n                id={id}\n                type=\"text\"\n                value={inputValue}\n                placeholder={label}\n                onChange={onChangeEvent}\n                onFocus={() => !locked && setActive(true)}\n                onBlur={() => !locked && setActive(false)}\n            />\n            <label htmlFor={id} className={error && 'error'}>\n                {inputError || label}\n            </label>\n        </div>\n    )\n}\n\nexport default TextInput;\n","import React, {useEffect, useRef} from 'react';\n\nimport styles from './Modal.module.scss';\n\nfunction Modal({children, onClose, size}) {\n    const wrapperRef = useRef(null);\n    const innerRef = useRef(null);\n\n    let modalSize\n    switch (size) {\n        case \"small\":\n            modalSize = styles.smallModalBox;\n            break;\n        case \"normal\":\n            modalSize = styles.normalModalBox;\n            break;\n        default:\n            modalSize = styles.normalModalBox;\n            break;\n    }\n    \n    useEffect(() => {\n        function handleClickOutside(event) {\n            if (wrapperRef.current && wrapperRef.current.contains(event.target)\n                && innerRef.current && !innerRef.current.contains(event.target)) {\n                onClose();\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [wrapperRef, innerRef, onClose]);\n\n    return (\n        <div ref={wrapperRef} className={styles.container}>\n            <div className={styles.modalContainer}>\n                <div ref={innerRef} className={modalSize}>\n                    {children}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { IoIosClose } from 'react-icons/io';\n\nimport styles from './GoToSubreddit.module.scss';\nimport Button from '../../shared/Button/Button';\nimport TextInput from '../../shared/TextInput/TextInput';\nimport Modal from '../../shared/Modal/Modal';\n\nfunction GoToSubreddit({onClose}) {\n    const [subreddit, setSubreddit] = useState('');\n    const history = useHistory();\n\n    function onChangeSubreddit(id, value) {\n        setSubreddit(value);\n    }\n\n    function onClick(event) {\n        event.preventDefault();\n        onClose();\n        history.push('/r/' + subreddit);\n    }\n\n    return (\n        <Modal onClose={onClose} size=\"small\">\n            <form className={styles.layout}>\n                <span className={styles.closeButton}>\n                    <IoIosClose alt=\"Close\" onClick={onClose} size=\"40px\" />\n                </span>\n                <div className={styles.subredditInput}>\n                    <TextInput label=\"Subreddit\" onChange={onChangeSubreddit}/>\n                </div>\n                <div className={styles.goButton}>\n                    <Button type=\"submit\" label=\"Go\" onClickEvent={onClick}/>\n                </div>\n            </form>\n        </Modal>\n    )\n}\n\nexport default GoToSubreddit;\n","\nexport function fetchSubreddits() {\n  const localStorageSubreddits = Object.keys(localStorage).map(key => {\n    return {\n      path: localStorage.getItem(key),\n      text: key,\n    };\n  })\n  const sortedSubreddits = localStorageSubreddits.sort((a, b) => {\n    const lowercasedA = a.text.toLowerCase();\n    const lowercasedB = b.text.toLowerCase();\n\n    if (lowercasedA < lowercasedB) {\n      return -1;\n    }\n\n    if (lowercasedA > lowercasedB) {\n      return 1;\n    }\n\n    return 0;\n  });\n\n  const subreddits = [{\n    path: '/home',\n    text: 'Home',\n  }, ...sortedSubreddits];\n\n  return subreddits;\n}\n\nexport function addSubreddit(subreddit) {\n  if (!localStorage.getItem(subreddit)) {\n    localStorage.setItem(subreddit, '/r/' + subreddit);\n  }\n}\n\nexport function removeSubreddit(subreddit) {\n  localStorage.removeItem(subreddit);\n}\n\nexport function isSubscribed(subreddit) {\n  if (!localStorage.getItem(subreddit)) {\n    return false;\n  }\n\n  return true;\n}\n","import React, { useState } from 'react';\nimport { IoIosClose } from 'react-icons/io';\n\nimport { addSubreddit } from '../../Reddit/subreddits';\nimport styles from './AddSubreddit.module.scss';\nimport Button from '../../shared/Button/Button';\nimport TextInput from '../../shared/TextInput/TextInput';\nimport Modal from '../../shared/Modal/Modal';\n\nfunction AddSubreddit({onClose, fetchSubreddits}) {\n    const [subreddit, setSubreddit] = useState('');\n\n    function onChangeSubreddit(id, value) {\n        setSubreddit(value);\n    }\n\n    function onClick(event) {\n        event.preventDefault();\n        addSubreddit(subreddit);\n        fetchSubreddits();\n        onClose();\n    }\n\n    return (\n        <Modal onClose={onClose} size=\"small\">\n            <form className={styles.layout}>\n                <span className={styles.closeButton}>\n                    <IoIosClose alt=\"Close\" onClick={onClose} size=\"40px\" />\n                </span>\n                <div className={styles.subredditInput}>\n                    <TextInput label=\"Subreddit\" onChange={onChangeSubreddit}/>\n                </div>\n                <div className={styles.addButton}>\n                    <Button type=\"submit\" label=\"Add\" onClickEvent={onClick}/>\n                </div>\n            </form>\n        </Modal>\n    )\n}\n\nexport default AddSubreddit;\n","import axios from 'axios';\n\nimport { Post } from './post';\n\nexport async function fetchPosts(subreddit, currentAfter) {\n  if (!subreddit) {\n    subreddit = 'all';\n  }\n  let result;\n  try {\n    result = await axios.get(\n      `https://www.reddit.com/r/${subreddit}.json?after=${currentAfter}&limit=15`,\n    );\n    console.log(result);\n    if (result.status !== 200) {\n      throw new Error(`Unable to fetch posts for ${subreddit}`);\n    }\n  } catch (err) {\n    throw new Error(`Unable to fetch posts for ${subreddit}`);\n  }\n\n  if (result && result.data && result.data.data) {\n    const { children, after } = result.data.data;\n    const posts = extractPosts(children);\n    return {\n      posts,\n      nextAfter: after,\n    };\n  }\n}\n\nfunction extractPosts(children) {\n  return children.map((child) => new Post(child.data));\n}\n","import React, { useEffect, useState } from 'react';\nimport { Route, useHistory } from 'react-router';\nimport {IoHeartSharp, IoHeartOutline} from 'react-icons/io5'\n\nimport styles from './Posts.module.scss';\nimport Navbar from '../Navbar/Navbar';\nimport CommentsOverview from '../Comments/CommentsOverview';\nimport InfiniteScroll from './InfiniteScroll';\nimport GoToSubreddit from '../GoToSubreddit/GoToSubreddit';\nimport Spinner from '../Icons/Spinner';\nimport Hamburger from '../Icons/Hamburger';\nimport AddSubreddit from '../AddSubreddit/AddSubreddit';\n\nimport { fetchPosts } from '../../Reddit/posts';\nimport { addSubreddit, removeSubreddit, isSubscribed } from '../../Reddit/subreddits';\n\nfunction PostsView({ match, isHome, subreddits, fetchSubreddits }) {\n  const { subreddit } = match.params;\n  const [postList, setPostList] = useState([]);\n  const [after, setAfter] = useState('');\n  const [selectedPost, setSelectedPost] = useState(undefined);\n  const history = useHistory();\n\n  const [showNavBar, setShowNavBar] = useState(true);\n  const [showGoToSubreddit, setShowGoToSubreddit] = useState(false);\n  const [showAddSubreddit, setShowAddSubreddit] = useState(false);\n\n  const [hasNextPage, setHasNextPage] = useState(false);\n  const [isNextPageLoading, setIsNextPageLoading] = useState(false);\n\n  function _loadNextPage(...args) {\n    function loadMore(subreddit, after) {\n      try {\n        setTimeout(async () => {\n          const { posts, nextAfter } = await fetchPosts(subreddit, after);\n          setPostList((prevPostList) => [...prevPostList, ...posts]);\n          setAfter(nextAfter);\n\n          if (!nextAfter) {\n            setHasNextPage(false);\n          } else {\n            setHasNextPage(true);\n          }\n\n          setIsNextPageLoading(false);\n        }, 1000);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    console.log('_loadNextPage', ...args);\n    setIsNextPageLoading(true);\n    loadMore(subreddit, after);\n  }\n\n  const commentsPath = isHome\n    ? '/home/r/:subreddit/comments/:postId'\n    : '/r/:subreddit/comments/:postId';\n\n  useEffect(() => {\n    async function fetch(subreddit, after) {\n      try {\n        const { posts, nextAfter } = await fetchPosts(subreddit, after);\n        setPostList(posts);\n        setAfter(nextAfter);\n        if (!nextAfter) {\n          setHasNextPage(false);\n        } else {\n          setHasNextPage(true);\n        }\n\n        setIsNextPageLoading(false);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    setIsNextPageLoading(true);\n    fetch(subreddit, '');\n\n    return () => {\n      setSelectedPost(undefined);\n      setPostList([]);\n      setAfter('');\n      setIsNextPageLoading(false);\n      setHasNextPage(false);\n      console.log('subreddit changed in postsview');\n    };\n  }, [subreddit]);\n\n  function onClickPost(post) {\n    console.log(post);\n    setSelectedPost(post);\n  }\n\n  function onCloseNav() {\n    setShowNavBar(!showNavBar);\n  }\n\n  function onShowGoToSubreddit() {\n    setShowAddSubreddit(false);\n    setShowGoToSubreddit(!showGoToSubreddit);\n  }\n\n  function onShowAddSubreddit() {\n    setShowGoToSubreddit(false);\n    setShowAddSubreddit(!showAddSubreddit);\n  }\n\n  function onCloseComments(event) {\n    if (event.keyCode === 27 || event.type === 'click') {\n      setSelectedPost(undefined);\n      if (isHome) {\n        history.push('/home');\n      } else {\n        history.push(`/r/${subreddit}`);\n      }\n    }\n  }\n\n  function subscribeToSubreddit() {\n    addSubreddit(subreddit);\n    fetchSubreddits();\n  }\n\n  function unsubscribeToSubreddit() {\n    console.log('test');\n    removeSubreddit(subreddit);\n    fetchSubreddits();\n  }\n\n  const initialLoading =\n    after === '' ? (\n      <div className={styles.loading}>\n        <Spinner />\n      </div>\n    ) : undefined;\n\n  const subredditText = isHome ? <div>Home</div> : <div>r/{subreddit}</div>;\n  return (\n    <div className={styles.container}>\n      {showNavBar && (\n        <Navbar\n          navData={subreddits}\n          selectedSubreddit={subreddit}\n          onCloseNav={onCloseNav}\n          onShowGoToSubreddit={onShowGoToSubreddit}\n          onShowAddSubreddit={onShowAddSubreddit}\n        />\n      )}\n      <div className={styles.posts}>\n        <Route\n          path={commentsPath}\n          render={(props) => (\n            <CommentsOverview\n              {...props}\n              onCloseNav={onCloseNav}\n              showNavBar={showNavBar}\n              selectedPost={selectedPost}\n              onCloseComments={onCloseComments}\n            />\n          )}\n        />\n        {showGoToSubreddit && (\n          <GoToSubreddit onClose={onShowGoToSubreddit} />\n        )}\n        {showAddSubreddit && (\n          <AddSubreddit onClose={onShowAddSubreddit} fetchSubreddits={fetchSubreddits}/>\n        )}\n        <div className={styles.subredditText}>\n          {!showNavBar && (\n            <span className={styles.hamburger}>\n              <Hamburger onClick={onCloseNav} />\n            </span>\n          )}\n          <h3>\n            <i>{subredditText}</i>\n          </h3>\n          {!isHome && <span className={styles.heart}>\n            {isSubscribed(subreddit) ? (\n              <IoHeartSharp size=\"30px\" color=\"rgb(249, 24, 128)\" onClick={unsubscribeToSubreddit}/>\n            ) : (\n              <IoHeartOutline size=\"30px\" onClick={subscribeToSubreddit}/>\n            )}\n          </span>}\n        </div>\n        <br />\n        {initialLoading}\n        <InfiniteScroll\n          subreddit={subreddit}\n          isHome={isHome}\n          hasNextPage={hasNextPage}\n          isNextPageLoading={isNextPageLoading}\n          postList={postList}\n          loadNextPage={_loadNextPage}\n          onClickPost={onClickPost}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default PostsView;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport PostsView from '../Posts/PostsView';\n\nfunction DashboardRouter({ subreddits, fetchSubreddits }) {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Redirect to=\"/home\" />\n      </Route>\n      <Route\n        path={'/home'}\n        render={(props) => (\n          <PostsView {...props} isHome={true} subreddits={subreddits} fetchSubreddits={fetchSubreddits}/>\n        )}\n      />\n      <Route\n        path={'/r/:subreddit'}\n        render={(props) => (\n          <PostsView {...props} isHome={false} subreddits={subreddits} fetchSubreddits={fetchSubreddits}/>\n        )}\n      />\n    </Switch>\n  );\n}\n\nexport default DashboardRouter;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport DashboardRouter from './DashboardRouter';\nimport styles from './Dashboard.module.scss';\n\nimport { fetchSubreddits } from '../../Reddit/subreddits';\n\nfunction Dashboard() {\n  const [subreddits, setSubreddits] = useState([]);\n  \n  const fetch = useCallback(() => {\n    const subreddits = fetchSubreddits();\n    setSubreddits(subreddits);\n  }, []);\n\n  useEffect(() => {\n    fetch();\n  }, [fetch]);\n\n  return (\n    <main className={styles.container}>\n      <div className={styles.content}>\n        <DashboardRouter subreddits={subreddits} fetchSubreddits={fetch}/>\n      </div>\n    </main>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Dashboard from './Dashboard/Dashboard';\n\nfunction ThredditRouter() {\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n          <Route path=\"*\" component={Dashboard} />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default ThredditRouter;\n","import React from 'react';\nimport ThredditRouter from './components/ThredditRouter';\n\nfunction App() {\n  return <ThredditRouter />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}